apiVersion: v1
kind: ConfigMap
metadata:
  name: wallet-db-config
data:
  db.conf: |
    database = "db.sqlite"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wallet-datasource-config
data:
  db.sqlite.conf: |
    hikariDataSource {
        jdbcUrl = "jdbc:sqlite:/waltid-wallet-api/data/data.db"
        driverClassName = "org.sqlite.JDBC"
        username = ""
        password = ""
        transactionIsolation = "TRANSACTION_SERIALIZABLE"
        maximumPoolSize = 5
        autoCommit = false
        dataSource {
            journalMode = "WAL"
            fullColumnNames = false
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wallet-web-config
data:
  web.conf: |
    webHost = "0.0.0.0"
    webPort = 4545
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wallet-data-volume-claim
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: wallet-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wallet-api
  template:
    metadata:
      labels:
        app: wallet-api
      annotations:
        deployment/id: "_DEFAULT_DEPLOYMENT_"
    spec:
      containers:
        - name: wallet-api
          image: waltid/wallet-api:portal-latest
          imagePullPolicy: Always
          volumeMounts:
            - name: wallet-db-config
              mountPath: "/waltid-wallet-api/config/db.conf"
              subPath: "db.conf"
              readOnly: true
            - name: wallet-datasource-config
              mountPath: "/waltid-wallet-api/config/db.sqlite.conf"
              subPath: "db.sqlite.conf"
              readOnly: true
            - name: wallet-web-config
              mountPath: "/waltid-wallet-api/config/web.conf"
              subPath: "web.conf"
              readOnly: true
            - name: wallet-push-config
              mountPath: "/waltid-wallet-api/config/push.conf"
              subPath: "push.conf"
              readOnly: true
            - name: wallet-nft-config
              mountPath: "/waltid-wallet-api/walt.yaml"
              subPath: "walt.yaml"
              readOnly: true
            - mountPath: "/waltid-wallet-api/data/"
              name: wallet-data
          ports:
            - containerPort: 4545
              name: http-api
      volumes:
        - name: wallet-db-config
          configMap:
            name: wallet-db-config
        - name: wallet-datasource-config
          configMap:
            name: wallet-datasource-config
        - name: wallet-web-config
          configMap:
            name: wallet-web-config
        - name: wallet-push-config
          secret:
            secretName: wallet-push-config-secret
        - name: wallet-nft-config
          secret:
            secretName: wallet-nft-config-secret
        - name: wallet-data
          persistentVolumeClaim:
            claimName: wallet-data-volume-claim
---
kind: Service
apiVersion: v1
metadata:
  name: wallet-api
spec:
  ports:
    - name: http
      port: 80
      targetPort: http-api
      protocol: TCP
  selector:
    app: wallet-api
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: waltid-web-wallet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: waltid-web-wallet
  template:
    metadata:
      labels:
        app: waltid-web-wallet
      annotations:
        deployment/id: "_DEFAULT_DEPLOYMENT_"
    spec:
      containers:
        - name: waltid-web-wallet
          image: waltid/waltid-web-wallet:portal-latest
          imagePullPolicy: Always
          env:
            - name: NUXT_PUBLIC_ISSUER_CALLBACK_URL
              value: "https://wallet.portal.walt.id"
          ports:
            - containerPort: 7101
              name: http-api
---
kind: Service
apiVersion: v1
metadata:
  name: waltid-web-wallet
spec:
  ports:
    - name: http
      port: 80
      targetPort: http-api
      protocol: TCP
  selector:
    app: waltid-web-wallet
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wallet-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
        - wallet.portal.walt.id
      secretName: wallet-tls-secret
  rules:
    - host: wallet.portal.walt.id
      http:
        paths:
          - path: /wallet-api/
            pathType: Prefix
            backend:
              service:
                name: wallet-api
                port:
                  name: http
          - path: /swagger
            pathType: Prefix
            backend:
              service:
                name: wallet-api
                port:
                  name: http
          - path: /
            pathType: Prefix
            backend:
              service:
                name: waltid-web-wallet
                port:
                  name: http
